name: Build OpenWrt and Release

on:
  workflow_dispatch:
    inputs:
      openwrt_ref:
        description: 'OpenWrt branch/tag/commit (e.g. openwrt-23.05, v23.05.3, af42c3b2)'
        required: false
        default: 'master'
      config_path:
        description: 'Path to .config file (default: .config in repo root)'
        required: false
        default: '.config'

permissions:
  contents: write

env:
  OPENWRT_REPO: https://github.com/openwrt/openwrt.git
  CUSTOM_PACKAGES: https://github.com/harryzhaozy/luci-packages.git
  WORKDIR: openwrt
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  DL_DIR: ${{ github.workspace }}/.dl
  CCACHE_SIZE: 2G
  DL_SIZE_LIMIT_MB: 500

jobs:
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      artifact-path: ${{ steps.upload.outputs.artifact-path }}
    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ccache git wget unzip rsync gawk \
            libncurses5-dev libncursesw5-dev libssl-dev python3 python3-pip zlib1g-dev

      - name: Clone OpenWrt
        run: |
          git clone $OPENWRT_REPO ${{ env.WORKDIR }}
          cd ${{ env.WORKDIR }}
          ref="${{ github.event.inputs.openwrt_ref }}"
          if git rev-parse --verify --quiet "$ref" >/dev/null; then
            git checkout "$ref"
          elif git ls-remote --exit-code --heads origin "$ref" >/dev/null 2>&1; then
            git checkout -B "$ref" origin/"$ref"
          elif git ls-remote --exit-code --tags origin "$ref" >/dev/null 2>&1; then
            git checkout "tags/$ref"
          fi
          # 修复可执行权限
          chmod +x scripts/*.sh scripts/toolchain/*.sh

      - name: Upload OpenWrt artifact
        uses: actions/upload-artifact@v3
        id: upload
        with:
          name: openwrt-source
          path: ${{ env.WORKDIR }}

  build-toolchain:
    runs-on: ubuntu-22.04
    needs: prepare
    steps:
      - name: Download OpenWrt artifact
        uses: actions/download-artifact@v3
        with:
          name: openwrt-source
          path: ${{ env.WORKDIR }}

      - name: Fix script permissions
        run: |
          chmod +x ${{ env.WORKDIR }}/scripts/*.sh
          chmod +x ${{ env.WORKDIR }}/scripts/toolchain/*.sh

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.event.inputs.openwrt_ref }}-${{ runner.os }}

      - name: Restore dl cache
        uses: actions/cache@v4
        with:
          path: ${{ env.DL_DIR }}
          key: dl-${{ github.event.inputs.openwrt_ref }}-${{ runner.os }}

      - name: Build toolchain
        working-directory: ${{ env.WORKDIR }}
        run: make toolchain/install -j$(nproc) V=s

      - name: Cleanup after toolchain
        working-directory: ${{ env.WORKDIR }}
        run: rm -rf tmp/* logs/*

      - name: Upload toolchain artifact
        uses: actions/upload-artifact@v3
        with:
          name: openwrt-toolchain
          path: ${{ env.WORKDIR }}

  build-rust:
    runs-on: ubuntu-22.04
    needs: build-toolchain
    steps:
      - name: Download OpenWrt + Toolchain artifact
        uses: actions/download-artifact@v3
        with:
          name: openwrt-toolchain
          path: ${{ env.WORKDIR }}

      - name: Fix script permissions
        run: |
          chmod +x ${{ env.WORKDIR }}/scripts/*.sh
          chmod +x ${{ env.WORKDIR }}/scripts/toolchain/*.sh

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.event.inputs.openwrt_ref }}-${{ runner.os }}

      - name: Restore dl cache
        uses: actions/cache@v4
        with:
          path: ${{ env.DL_DIR }}
          key: dl-${{ github.event.inputs.openwrt_ref }}-${{ runner.os }}

      - name: Build Rust
        working-directory: ${{ env.WORKDIR }}
        run: |
          if make package/feeds/packages/rust/compile -j$(nproc) V=s; then
            echo "Rust parallel build success"
          else
            echo "Rust parallel build failed, trying single-thread..."
            make package/feeds/packages/rust/compile -j1 V=s
          fi

      - name: Cleanup after Rust
        working-directory: ${{ env.WORKDIR }}
        run: rm -rf tmp/* logs/* build_dir/target-*/rust-*/target

      - name: Upload Rust artifact
        uses: actions/upload-artifact@v3
        with:
          name: openwrt-rust
          path: ${{ env.WORKDIR }}

  build-firmware:
    runs-on: ubuntu-22.04
    needs: build-rust
    steps:
      - name: Download OpenWrt + Rust artifact
        uses: actions/download-artifact@v3
        with:
          name: openwrt-rust
          path: ${{ env.WORKDIR }}

      - name: Fix script permissions
        run: |
          chmod +x ${{ env.WORKDIR }}/scripts/*.sh
          chmod +x ${{ env.WORKDIR }}/scripts/toolchain/*.sh

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.event.inputs.openwrt_ref }}-${{ runner.os }}

      - name: Restore dl cache
        uses: actions/cache@v4
        with:
          path: ${{ env.DL_DIR }}
          key: dl-${{ github.event.inputs.openwrt_ref }}-${{ runner.os }}

      - name: Build firmware
        working-directory: ${{ env.WORKDIR }}
        run: make -j$(nproc) IGNORE_ERRORS=m || make -j1 V=s

      - name: Cleanup after firmware
        working-directory: ${{ env.WORKDIR }}
        run: rm -rf build_dir/* staging_dir/* tmp/* logs/*

      - name: Upload firmware release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: openwrt-${{ github.event.inputs.openwrt_ref || 'master' }}
          name: "OpenWrt build ${{ github.event.inputs.openwrt_ref || 'master' }}"
          files: |
            ${{ env.WORKDIR }}/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.img.gz
            ${{ env.WORKDIR }}/bin/targets/x86/64/openwrt-x86-64-generic-ext4-combined-efi.img.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
