name: Build OpenWrt and Release

on:
  workflow_dispatch:
    inputs:
      openwrt_ref:
        description: 'OpenWrt branch/tag/commit'
        required: false
        default: 'master'
      config_path:
        description: 'Path to .config file'
        required: false
        default: '.config'

permissions:
  contents: write

env:
  OPENWRT_REPO: https://github.com/openwrt/openwrt.git
  CUSTOM_PACKAGES: https://github.com/harryzhaozy/luci-packages.git
  WORKDIR: openwrt
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  DL_DIR: ${{ github.workspace }}/.dl
  CCACHE_SIZE: 2G
  DL_SIZE_LIMIT_MB: 500

jobs:

  setup:
    name: Setup and Checkout
    runs-on: ubuntu-22.04
    outputs:
      workdir-artifact: ${{ steps.upload.outputs.artifact_name }}
    steps:
      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc \
                      /opt/hostedtoolcache /usr/local/lib/node_modules \
                      /usr/local/share/boost /usr/share/swift \
                      /usr/local/lib/heroku /usr/local/lib/firefox
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/* /var/cache/apt/*

      - name: Checkout OpenWrt
        run: |
          git clone $OPENWRT_REPO $WORKDIR
          cd $WORKDIR
          ref="${{ github.event.inputs.openwrt_ref }}"
          if git rev-parse --verify --quiet "$ref" >/dev/null; then
            git checkout "$ref"
          elif git ls-remote --exit-code --heads origin "$ref" >/dev/null 2>&1; then
            git checkout -B "$ref" origin/"$ref"
          elif git ls-remote --exit-code --tags origin "$ref" >/dev/null 2>&1; then
            git checkout "tags/$ref"
          fi
          # 添加自定义包
          git clone $CUSTOM_PACKAGES package/custom-packages
          # 更新 feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          # 设置 config
          cfg_path="${{ github.workspace }}/${{ github.event.inputs.config_path || '.config' }}"
          if [ -f "$cfg_path" ]; then
            cp "$cfg_path" .config
            make defconfig
          fi
          # 修复 rust bootstrap
          sed -i 's/--set=llvm\.download-ci-llvm=true/--set=llvm.download-ci-llvm=false/' feeds/packages/lang/rust/Makefile
          make defconfig
          # 设置 ccache/dl 目录
          mkdir -p "$CCACHE_DIR" "$DL_DIR"
          ccache -M ${CCACHE_SIZE}

      - name: Ensure scripts are executable
        run: |
          chmod +x ${{ env.WORKDIR }}/scripts/*.sh

      - name: Upload OpenWrt source artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-source
          path: ${{ env.WORKDIR }}

  build-toolchain:
    name: Build Toolchain
    runs-on: ubuntu-22.04
    needs: setup
    steps:
      - name: Download OpenWrt source
        uses: actions/download-artifact@v4
        with:
          name: openwrt-source
          path: ${{ env.WORKDIR }}

      - name: Ensure scripts are executable
        run: |
          chmod +x ${{ env.WORKDIR }}/scripts/*.sh

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.event.inputs.openwrt_ref }}-${{ runner.os }}
          restore-keys: |
            ccache-${{ github.event.inputs.openwrt_ref }}
            ccache-

      - name: Restore dl
        uses: actions/cache@v4
        with:
          path: ${{ env.DL_DIR }}
          key: dl-${{ github.event.inputs.openwrt_ref }}-${{ runner.os }}
          restore-keys: |
            dl-${{ github.event.inputs.openwrt_ref }}
            dl-

      - name: Build Toolchain
        working-directory: ${{ env.WORKDIR }}
        run: make toolchain/install -j$(nproc) V=s

      - name: Cleanup Toolchain
        working-directory: ${{ env.WORKDIR }}
        run: |
          rm -rf tmp/* logs/*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-toolchain
          path: ${{ env.WORKDIR }}

  build-rust:
    name: Build Rust
    runs-on: ubuntu-22.04
    needs: build-toolchain
    steps:
      - name: Download Toolchain artifact
        uses: actions/download-artifact@v4
        with:
          name: openwrt-toolchain
          path: ${{ env.WORKDIR }}

      - name: Ensure scripts are executable
        run: |
          chmod +x ${{ env.WORKDIR }}/scripts/*.sh

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.event.inputs.openwrt_ref }}-${{ runner.os }}

      - name: Restore dl
        uses: actions/cache@v4
        with:
          path: ${{ env.DL_DIR }}
          key: dl-${{ github.event.inputs.openwrt_ref }}-${{ runner.os }}

      - name: Build Rust
        working-directory: ${{ env.WORKDIR }}
        run: |
          if make package/feeds/packages/rust/compile -j$(nproc) V=s; then
            echo "Rust parallel build succeeded"
          else
            echo "Retrying single-thread..."
            make package/feeds/packages/rust/compile -j1 V=s
          fi

      - name: Cleanup Rust
        working-directory: ${{ env.WORKDIR }}
        run: rm -rf tmp/* logs/* build_dir/target-*/rust-*/target

      - name: Upload Rust artifact
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-rust
          path: ${{ env.WORKDIR }}

  build-firmware:
    name: Build Firmware
    runs-on: ubuntu-22.04
    needs: build-rust
    steps:
      - name: Download Rust artifact
        uses: actions/download-artifact@v4
        with:
          name: openwrt-rust
          path: ${{ env.WORKDIR }}

      - name: Ensure scripts are executable
        run: |
          chmod +x ${{ env.WORKDIR }}/scripts/*.sh

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.event.inputs.openwrt_ref }}-${{ runner.os }}

      - name: Restore dl
        uses: actions/cache@v4
        with:
          path: ${{ env.DL_DIR }}
          key: dl-${{ github.event.inputs.openwrt_ref }}-${{ runner.os }}

      - name: Build Firmware
        working-directory: ${{ env.WORKDIR }}
        run: make -j$(nproc) IGNORE_ERRORS=m || make -j1 V=s

      - name: Upload Firmware to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: openwrt-${{ github.event.inputs.openwrt_ref || 'master' }}
          name: "OpenWrt build ${{ github.event.inputs.openwrt_ref || 'master' }}"
          files: |
            ${{ env.WORKDIR }}/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.img.gz
            ${{ env.WORKDIR }}/bin/targets/x86/64/openwrt-x86-64-generic-ext4-combined-efi.img.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
